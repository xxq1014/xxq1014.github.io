<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[CSS的垂直居中和水平居中总结]]></title>
      <url>%2F2016%2F11%2F18%2Fcenter%2F</url>
      <content type="text"><![CDATA[CSS的垂直居中和水平居中总结前言CSS居中一直是一个比较敏感的话题，为了以后开发的方便，楼主觉得确实需要总结一下了，总的来说，居中问题分为垂直居中和水平居中，实际上水平居中是很简单的，但垂直居中的方式和方法就千奇百怪了。 内联元素居中方案水平居中设置： 1.行内元素 设置 text-align:center； 2.Flex布局 设置display:flex;justify-content:center;(灵活运用) 垂直居中设置： 1.父元素高度确定的单行文本（内联元素） 设置 height = line-height； 2.父元素高度确定的多行文本（内联元素） a:插入 table （插入方法和水平居中一样），然后设置 vertical-align:middle； b:先设置 display:table-cell 再设置 vertical-align:middle； 块级元素居中方案水平居中设置： 1.定宽块状元素 设置 左右 margin 值为 auto； 2.不定宽块状元素 a:在元素外加入 table 标签（完整的，包括 table、tbody、tr、td），该元素写在 td 内，然后设置 margin 的值为 auto； b:给该元素设置 display:inine 方法； c:父元素设置 position:relative 和 left:50%，子元素设置 position:relative 和 left:50%； 垂直居中设置： 1.使用position:absolute（fixed）,设置left、top、margin-left、margin-top的属性; 1234567.box&#123; position:absolute;/*或fixed*/ top:50%; left:50%; margin-top:-100px; margin-left:-200px;&#125; 2.利用position:fixed（absolute）属性，margin:auto这个必须不要忘记了; 12345678.box&#123; position: absolute;或fixed top:0; right:0; bottom:0; left:0; margin: auto;&#125; 3.利用display:table-cell属性使内容垂直居中; 12345678.box&#123; display:table-cell; vertical-align:middle; text-align:center; width:120px; height:120px; background:purple;&#125; 4.使用css3的新属性transform:translate(x,y)属性; 1234567.box&#123; position: absolute; transform: translate(50%,50%); -webkit-transform:translate(50%,50%); -moz-transform:translate(50%,50%); -ms-transform:translate(50%,50%);&#125; 5.最高大上的一种，使用:before元素; 12345678910111213141516.box&#123; position:fixed; display:block; background:rgba(0,0,0,.5);&#125;.box:before&#123; content:&apos;&apos;; display:inline-block; vertical-align:middle; height:100%;&#125;.box.content&#123; width:60px; height:60px; line-height:60px; color:red; 6.Flex布局; 12345678910111213141516171819202122.box&#123; display: -webkit-box; display: -webkit-flex; display: -moz-box; display: -moz-flex; display: -ms-flexbox; display: flex; 水平居中 -webkit-box-align: center; -moz-box-align: center; -ms-flex-pack:center; -webkit-justify-content: center; -moz-justify-content: center; justify-content: center; 垂直居中 -webkit-box-pack: center; -moz-box-pack: center; -ms-flex-align:center; -webkit-align-items: center; -moz-align-items: center; align-items: center;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CSS清除浮动方法总结]]></title>
      <url>%2F2016%2F11%2F18%2Fremove-float%2F</url>
      <content type="text"><![CDATA[CSS清除浮动方法总结总括：详细总结了CSS中清楚浮动的几种方法。 什么是CSS清除浮动？在非IE浏览器（如Firefox）下，当容器的高度为auto，且容器的内容中有浮动（float为left或right）的元素，在这种情况下，容器的高度不能自动伸长以适应内容的高度，使得内容溢出到容器外面而影响（甚至破坏）布局的现象。这个现象叫浮动溢出，为了防止这个现象的出现而进行的CSS处理，就叫CSS清除浮动。 引用W3C的例子，news容器没有包围浮动的元素。.news { background-color: gray; border: solid 1px black; } .news img { float: left; } .news p { float: right; } &lt;div class=&quot;news&quot;&gt; &lt;img src=&quot;news-pic.jpg&quot; /&gt; &lt;p&gt;some text&lt;/p&gt; &lt;/div&gt; 清除浮动方法方法一：使用带clear属性的空元素在浮动元素后使用一个空元素如 &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt; ，并在CSS中赋予 .clear{clear:both;} 属性即可清理浮动。亦可使用 &lt;br class=&quot;clear&quot; /&gt;或&lt;hr class=&quot;clear&quot; /&gt; 来进行清理。 .news { background-color: gray; border: solid 1px black; } .news img { float: left; } .news p { float: right; } .clear { clear: both; } &lt;div class=&quot;news&quot;&gt; &lt;img src=&quot;news-pic.jpg&quot; /&gt; &lt;p&gt;some text&lt;/p&gt; &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt; &lt;/div&gt; 优点：简单，代码少，浏览器兼容性好。 缺点：需要添加大量无语义的html元素，代码不够优雅，后期不容易维护。 方法二：使用CSS的overflow属性给浮动元素的容器添加 overflow:hidden; 或 overflow:auto; 可以清除浮动，另外在 IE6 中还需要触发hasLayout，例如为父元素设置容器宽高或设置zoom:1。在添加overflow属性后，浮动元素又回到了容器层，把容器高度撑起，达到了清理浮动的效果。 .news { background-color: gray; border: solid 1px black; overflow: hidden; *zoom: 1; } .news img { float: left; } .news p { float: right; } &lt;div class=&quot;news&quot;&gt; &lt;img src=&quot;news-pic.jpg&quot; /&gt; &lt;p&gt;some text&lt;/p&gt; &lt;/div&gt; 方法三：给浮动的元素的容器添加浮动给浮动元素的容器也添加上浮动属性即可清除内部浮动，但是这样会使其整体浮动，影响布局，不推荐使用。 方法四：使用邻接元素处理什么都不做，给浮动元素后面的元素添加clear属性。 .news { background-color: gray; border: solid 1px black; } .news img { float: left; } .news p { float: right; } .content{ clear:both; } &lt;div class=&quot;news&quot;&gt; &lt;img src=&quot;news-pic.jpg&quot; /&gt; &lt;p&gt;some text&lt;/p&gt; &lt;div class=&quot;content&quot;&gt;***&lt;/div&gt; &lt;/div&gt; 注意这里的div.content有内容。 方法五：使用CSS的:after伪元素结合:after伪元素（注意这不是伪类，而是伪元素，代表一个元素之后最近的元素）和 IEhack ，可以完美兼容当前主流的各大浏览器，这里的 IEhack 指的是触发hasLayout。给浮动元素的容器添加一个clearfix的class，然后给这个class添加一个:after伪元素实现元素末尾添加一个看不见的块元素（Block element）清理浮动。 .news { background-color: gray; border: solid 1px black; } .news img { float: left; } .news p { float: right; } .clearfix:after{ content: &quot;020&quot;; display: block; height: 0; clear: both; visibility: hidden; } .clearfix { /* 触发 hasLayout */ zoom: 1; } &lt;div class=&quot;news clearfix&quot;&gt; &lt;img src=&quot;news-pic.jpg&quot; /&gt; &lt;p&gt;some text&lt;/p&gt; &lt;/div&gt; 通过CSS伪元素在容器的内部元素最后添加了一个看不见的空格”020”或点”.”，并且赋予clear属性来清除浮动。需要注意的是为了IE6和IE7浏览器，要给clearfix这个class添加一条zoom:1;触发haslayout。 总结通过上面的例子，我们不难发现清除浮动的方法可以分成两类： 一是利用 clear 属性，包括在浮动元素末尾添加一个带有 clear: both 属性的空 div 来闭合元素，其实利用 :after 伪元素的方法也是在元素末尾添加一个内容为一个点并带有 clear: both 属性的元素实现的。 二是触发浮动元素父元素的 BFC (Block Formatting Contexts, 块级格式化上下文)，使到该父元素可以包含浮动元素，关于这一点。 在网页主要布局时使用:after伪元素方法并作为主要清理浮动方式；在小模块如ul里使用overflow:hidden;（留意可能产生的隐藏溢出元素问题）；如果本身就是浮动元素则可自动清除内部浮动，无需格外处理；正文中使用邻接元素清理之前的浮动。 最后可以使用相对完美的:after伪元素方法清理浮动，文档结构更加清晰。这也是比较常用的方法。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[ReactNative准备:环境的创建和应用]]></title>
      <url>%2F2016%2F11%2F17%2Freact-native%2F</url>
      <content type="text"><![CDATA[1.配置相关环境,点击下面两个网址,打开终端,按要求安装要下面4个环境:官网:https://facebook.github.io/react-native/docs/getting-started.html#content 中文网:http://reactnative.cn/docs/0.24/getting-started.html#content 这里仅列出了OS X操作系统的环境安装, window的可以自己查看上面给出网址里有. 重要安装命令如下: #####（1）安装homebrew，在终端输入： /usr/bin/ruby -e “$(curl -fsSLhttps://raw.githubusercontent.com/Homebrew/install/master/install)” #####（2）安装watchman：(监测文件变化的工具) brew install –HEAD watchman #####（3）安装node： brew install node #####（4）安装flow：（监测CSS语法的工具） brew install flow 之后是安装ReactNative: #####（5）安装ReactNative： npm install -g react-native-cli #####（6）初始化应用： react-native init ReactNative_1 (你需要的工程名) #####（7）运行应用：(这里假设你已安装了Xcode,有simulator虚拟机) react-native run-ios 到此环境已经搭建完毕,可以运行ReactNative程序了]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[react-native-icons的简单使用]]></title>
      <url>%2F2016%2F11%2F17%2Freact-native-icons%2F</url>
      <content type="text"><![CDATA[react-native-vector-icons的简单使用,图片,按钮,标签视图,导航条icons是可以直接使用图片名, 就能加载图片的三方,使用很方便, 你不需要在工程文件夹里塞各种图片, 节省很多空间,下面就来看看怎么使用吧! 1.首先打开终端进入到我们的工程文件夹下输入npm install react-native-vector-icons --save (回车) npm install rnpm -g rnpm link (回车) 2. 在Finder中用Xcode打开工程: …/Demo/ios/Demo.xcodeproj(1).右键工程文件Add Files to “(你工程名)”(2).选择node_modules/react-native-vector-icons/Fonts文件(3).点击”完成”. 3. 在xcode的Info.plist文件中,加入: Fonts provided by application数组,并加入以下9项: 到此环境就算设置好了, 接下来就是使用ICONS了. 4. 在Finder中右键用Atom打开工程: 5.然后就开始编辑我们的程序了:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106&apos;use strict&apos;;import React, &#123; AppRegistry, Component, View, StyleSheet, AlertIOS, Text, TabBarIOS, NavigatorIOS,&#125; from &apos;react-native&apos;;var Icon = require(&apos;react-native-vector-icons/FontAwesome&apos;);import FindComponent from &apos;./FindComponent&apos;;import SearchComponent from &apos;./SearchComponent&apos;;class Demo extends Component &#123; state = &#123; selectedTab: &apos;find&apos;, &#125;; loginWithFacebook = () =&gt; &#123; //点击&quot;Login with Facebook&quot;按钮后触发的方法 AlertIOS.alert(&quot;facebook&quot;); &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Icon name=&quot;rocket&quot; //图片名连接,可以到这个网址搜索:http://ionicons.com/, 使用时:去掉前面的 &quot;icon-&quot; !!!! size=&#123;30&#125; //图片大小 color=&quot;red&quot; //图片颜色 /&gt; &lt;Icon.Button //在图片后加文字 name=&quot;facebook&quot; backgroundColor=&quot;#3b5998&quot; onPress=&#123;this.loginWithFacebook&#125; //点击该按钮后触发的方法 &gt; Login with Facebook &lt;/Icon.Button&gt; &lt;Icon.Button //在图片后加, 自定义样式的文字 name=&quot;facebook&quot; backgroundColor=&quot;#3b5998&quot;&gt; &lt;Text style=&#123;&#123;fontFamily: &apos;Arial&apos;, fontSize: 15&#125;&#125;&gt;Login with Facebook&lt;/Text&gt; &lt;/Icon.Button&gt; &lt;TabBarIOS //和标签视图一起使用 tintColor=&quot;#4977f0&quot; barTintColor=&quot;#E6E6E6&quot;&gt; &lt;Icon.TabBarItem //用 Icon.TabBarItem 代替 TabBarIOS.Item title=&quot;发现&quot; iconName=&quot;home&quot; selectedIconName=&quot;home&quot; selected = &#123;this.state.selectedTab === &apos;find&apos;&#125; onPress=&#123;() =&gt; &#123; this.setState(&#123; selectedTab: &apos;find&apos;, &#125;); &#125;&#125; &gt; &lt;NavigatorIOS //导航栏 style=&#123;styles.container&#125; tintColor=&apos;#FFFFFF&apos; barTintColor=&apos;#4977f0&apos; initialRoute=&#123;&#123; title: &quot;发现&quot;, titleTextColor: &apos;white&apos;, component: FindComponent &#125;&#125; /&gt; &lt;/Icon.TabBarItem&gt; &lt;Icon.TabBarItem //用 Icon.TabBarItem 代替 TabBarIOS.Item title=&quot;搜索&quot; iconName=&quot;search&quot; selectedIconName=&quot;search&quot; selected = &#123;this.state.selectedTab === &apos;search&apos;&#125; onPress=&#123;() =&gt; &#123; this.setState(&#123; selectedTab: &apos;search&apos;, &#125;); &#125;&#125; &gt; &lt;NavigatorIOS style=&#123;styles.container&#125; tintColor=&apos;#FFFFFF&apos; barTintColor=&apos;#4977f0&apos; initialRoute=&#123;&#123; title: &quot;搜索&quot;, titleTextColor: &apos;white&apos;, component: SearchComponent &#125;&#125; /&gt; &lt;/Icon.TabBarItem&gt; &lt;/TabBarIOS&gt; &lt;/View&gt; ); &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &apos;center&apos;, &#125;,&#125;);AppRegistry.registerComponent(&apos;Demo&apos;, () =&gt; Demo); 在terminal中的工程文件夹下,输入react-native run-ios(回车)等待程序运行起来就能看到效果啦. 主要代码下载地址: http://download.csdn.net/detail/margaret_mo/9512769 参考网站: https://github.com/oblador/react-native-vector-icons]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[gulp的简易安装流程]]></title>
      <url>%2F2016%2F11%2F16%2Fgulp%2F</url>
      <content type="text"><![CDATA[安裝gulp1.安装 nodenode下载地址：http://nodejs.cn/download/ 安装比较简单，基本一直下一步即可，安装路径随意。安装完成后，终端输入如下命令 显示版本号即安装成功。 node -v 2.全局安装gulp执行 npm install gulp -g 检测gulp是否安装成功执行 gulp -v 显示版本号即安装成功 3.项目文件根目录新建package.json注：package.json是基于nodejs项目必不可少的配置文件，它是存放在项目根目录的普通json文件重点内容 1.先创建一个项目文件夹 2.进入项目文件夹中 3.运行 npm init 产出 package.json 的文件 4.检测package.json是否成功新建 查看项目文件根目录，是否新建package.json 本地安装gulp插件注：全局安装gulp是为了执行gulp任务，本地安装gulp则是为了调用gulp插件的功能进入你的项目文件路径中后，执行 npm install gulp --save-dev 安装插件安装 gulp-jade 和 gulp-sass （拿该插件进行示例） npm install gulp-jade gulp-sass 新建gulpfile.js注：gulpfile.js是gulp的配置文件，放于根目录中 在gulpfile.js 引入插件 // 引入你所需要用到的插件 require(&quot;引入的插件名称&quot;); var jade = require(&quot;gulp-jade&quot;); var sass = require(&quot;gulp-sass&quot;); var gulp = require(&quot;gulp&quot;); 定制任务 创建sass文件目录 // 写任务 默认任务名 default gulp.task(&quot;sass&quot;,function(){ gulp.src(&quot;sass/*.scss&quot;) //获取该任务需要的文件 .pipe(sass()) //该任务调用的模块 .pipe(gulp.dest(&quot;css/&quot;)) //将在css文件夹中生成css文件 }); // 默认任务 gulp.task(&quot;default&quot;,[&quot;sass&quot;,&quot;watch&quot;]); //监听文件 gulp.task(&quot;watch&quot;,function(){ gulp.watch(&quot;sass/*.scss&quot;,[&quot;sass&quot;]) //监听sass文件里所有以‘*.scss’结尾的文件，修改时自动执行 sass 任务。 }); 运行 gulp执行 gulp 任务名称 运行该任务 示例：gulp sass 执行gulpfile.js中的sass任务 执行 gulp 调用default中的所有任务 常用插件sass的编译 (gulp-sass) less编译 （gulp-less） 重命名（gulp-rename） 自动添加css前缀（gulp-autoprefixer） 压缩css（gulp-clean-css） js代码校验（gulp-jshint） 合并js文件（gulp-concat） 压缩js代码（gulp-uglify） 压缩图片（gulp-imagemin） 自动刷新页面（gulp-livereload，谷歌浏览器亲测，谷歌浏览器需安装livereload插件） 图片缓存，只有图片替换了才压缩（gulp-cache） 更改提醒（gulp-notify）]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo,搭建属于自己的博客]]></title>
      <url>%2F2016%2F11%2F14%2Fhexo%2F</url>
      <content type="text"><![CDATA[正文：hexo是一款基于Node.js的静态博客框架，由于原文讲到的hexo是以前的老版本，所以现在的版本配置的时候会有些改动。 配置环境：安装Node （必须） 作用：用来生成静态页面的 到Node.js官网下载相应平台的最新版本，一路安装即可。 安装Git（必须） 作用：把本地的hexo内容提交到github上去。 安装Xcode就自带有Git，我就不多说了。 申请GitHub（必须） 作用：是用来做博客的远程创库、域名、服务器之类的，怎么与本地hexo建立连接等下讲。 github账号我也不再啰嗦了,没有的话直接申请就行了，跟一般的注册账号差不多，SSH Keys，看你自己了，可以不配制，不配置的话以后每次对自己的博客有改动提交的时候就要手动输入账号密码，配置了就不需要了，怎么配置我就不多说了，网上有很多教程。 正式安装HexoNode和Git都安装好后,首先创建一个文件夹,如blog,用户存放hexo的配置文件,然后进入blog里安装Hexo。 执行如下命令安装Hexo： sudo npm install -g hexo 初始化然后，执行init命令初始化hexo,命令： hexo init 好啦，至此，全部安装工作已经完成！blog就是你的博客根目录，所有的操作都在里面进行。 生成静态页面 hexo generate（hexo g也可以） 本地启动 启动本地服务，进行文章预览调试，命令： hexo server 浏览器输入http://localhost:4000 我不知道你们能不能，反正我不能，因为我还有环境没配置好 配置Github建立Repository 建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法 然后建立关联，我的blog在本地/Users/leopard/blog，blog是我之前建的东西也全在这里面，有： _config.yml node_modules public source **db.json** **package.json** **scaffolds** **themes** 现在我们需要_config.yml文件，来建立关联，命令： vim _config.yml 翻到最下面，改成我这样子的 deploy: type: git repository: https://github.com/xxxxxx/xxxxxx.github.io.git (xxxxxx改为你的github用户名) branch: master 然后执行命令： npm install hexo-deployer-git –save 网上会有很多说法，有的type是github, 还有repository最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.1.1，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。 忘了说了，我没用SSH Keys如果你用了SSH Keys的话直接在github里复制SSH的就行了，总共就两种协议，相信你懂的。 然后，执行配置命令： hexo deploy 然后再浏览器中输入http://xxxxxx.github.io/ 就行了，把这里的‘xxxxxx’改成你github的账户名就行了部署步骤 每次部署的步骤，可按以下三步来进行。 **hexo clean** **hexo generate** **hexo deploy** 一些常用命令： hexo new”postName” #新建文章 hexo new page”pageName” #新建页面 hexo generate #生成静态页面至public目录 hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server） hexo deploy #将.deploy目录部署到GitHub hexo help # 查看帮助 hexo version #查看Hexo的版本 报错总结ERROR Deployer not found: git 或者 ERROR Deployer not found: github 解决方法： npm install hexo-deployer-git –save 如发生报错： ERROR Process failed: layout/.DS_Store , 那么进入主题里面layout和_partial目录下，使用删除命令： rm-rf.DS_Store ERROR Plugin load failed: hexo-server 原因： Besides,utilities are separated into a standalone module.hexo.util is not reachable anymore. 解决方法，执行命令： sudo npm install hexo-server 执行命令hexo server，提示：Usage: hexo …. 原因： 我认为是没有生成本地服务 解决方法，执行命令： npm install hexo-server –save 提示：hexo-server@0.1.2 node_modules/hexo-server …. 表示成功了参考 这个时候再执行： hexo-server 得到: INFOHexois running at http://127.0.0.1:4000/.PressCtrl+C to stop. 这个时候再点击http://127.0.0.1:4000，正常情况下应该是最原始的画面，如果你看到的是： 白板和Cannot GET / 几个字 原因： 由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令： npm install hexo-renderer-ejs –save npm install hexo-renderer-stylus –save npm install hexo-renderer-marked –save 这个时候再重新生成静态文件，命令： hexo generate（或hexo g） 启动本地服务器： hexo server（或hexo s） 再，点击网址http://127.0.0.1:4000OK终于可以看到属于你自己的blog啦，😄，虽然很简陋，但好歹有了一个属于自己的小窝了。参考链接，本地已经简单的设置好了，但是现在域名和服务器都是基于自己的电脑，接下来需要跟github进行关联。 主题推荐这里有大量的主题列表使用方法里面 都有详细的介绍，我就不多说了。 我这里有几款个人认为不错的主题，免去你们，一个一个的选了，欢迎吐槽我的审美，😄 Cover- A chic theme with facebook-like cover photo Oishi- A white theme based on Landscape plus and Writing. Sidebar- Another theme based on Light with a simple sidebar TKL- A responsive design theme for Hexo. 一个设计优雅的响应式主题 Tinnypp- A clean, simple theme based on Tinny Writing- A small and simple hexo theme based on Light Yilia- Responsive and simple style 优雅简洁响应式主题，我用得就是这个。 Pacman voidy- A theme with dynamic tagcloud and dynamic snow 一些基本路径文章在source/_posts, 文章支持Markdown语法，可以使用一些MarkDown渲染工具。如果想修改头像可以直接在主题的_config.yml文件里面修改，友情链接，之类的都在这里。开始打理你的博客吧，有什么问题或者建议，都可以提出来，我会继续完善的。 ###修改头像我当前的路径/Users/leopard/blog/themes/yilia，ls 你可以看到 Gruntfile.js _config.yml package.json README.md layout source vim _config.yml 进去，找到 #你的头像url avatar: 后接一个URL就行了，头像就修改成功了 部署 hexo g 提交 hexo d ###Markdown语法参考链接 链接 转载自 潘柏信的博客：http://leopardpan.github.io,搭建属于自己的博客]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Mou 书写格式]]></title>
      <url>%2F2016%2F11%2F14%2Fmou%2F</url>
      <content type="text"><![CDATA[Mou OverviewMou, the missing Markdown editor for web developers. SyntaxStrong and Emphasizestrong or strong ( Cmd + B ) emphasize or emphasize ( Cmd + I ) Sometimes I want a lot of text to be bold.Like, seriously, a LOT of text Blockquotes Right angle brackets &gt; are used for block quotes. Links and EmailAn email &#x65;&#x78;&#x61;&#x6d;&#x70;&#108;&#101;&#64;&#101;&#x78;&#97;&#x6d;&#x70;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#109; link. Simple inline link http://chenluois.com, another inline link Smaller, one more inline link with title Resize. A reference style link. Input id, then anywhere in the doc, define the link with corresponding id: Titles ( or called tool tips ) in the links are optional. ImagesAn inline image , title is optional. A reference style image. Inline code and Block codeInline code are surround by backtick key. To create a block code: Indent each line by at least 1 tab, or 4 spaces. var Mou = exactlyTheAppIwant; Ordered ListsOrdered lists are created using “1.” + Space: Ordered list item Ordered list item Ordered list item Unordered ListsUnordered list are created using “*” + Space: Unordered list item Unordered list item Unordered list item Or using “-“ + Space: Unordered list item Unordered list item Unordered list item Hard LinebreakEnd a line with two or more spaces will create a hard linebreak, called &lt;br /&gt; in HTML. ( Control + Return )Above line ended with 2 spaces. Horizontal RulesThree or more asterisks or dashes: HeadersSetext-style: This is H1This is H2atx-style: This is H1This is H2This is H3This is H4This is H5This is H6Extra SyntaxFootnotesFootnotes work mostly like reference-style links. A footnote is made of two things: a marker in the text that will become a superscript number; a footnote definition that will be placed in a list of footnotes at the end of the document. A footnote looks like this: That’s some text with a footnote.[^1] [^1]: And that’s the footnote. StrikethroughWrap with 2 tilde characters: Strikethrough Fenced Code BlocksStart with a line containing 3 or more backticks, and ends with the first line with the same number of backticks: 123Fenced code blocks are like Stardard Markdown’s regular codeblocks, except that they’re not indented and instead rely ona start and end fence lines to delimit the code block. TablesA simple table looks like this: First Header Second Header Third Header Content Cell Content Cell Content Cell Content Cell Content Cell Content Cell If you wish, you can add a leading and tailing pipe to each line of the table: First Header Second Header Third Header Content Cell Content Cell Content Cell Content Cell Content Cell Content Cell Specify alignment for each column by adding colons to separator lines: First Header Second Header Third Header Left Center Right Left Center Right ShortcutsView Toggle live preview: Shift + Cmd + I Toggle Words Counter: Shift + Cmd + W Toggle Transparent: Shift + Cmd + T Toggle Floating: Shift + Cmd + F Left/Right = 1/1: Cmd + 0 Left/Right = 3/1: Cmd + + Left/Right = 1/3: Cmd + - Toggle Writing orientation: Cmd + L Toggle fullscreen: Control + Cmd + F Actions Copy HTML: Option + Cmd + C Strong: Select text, Cmd + B Emphasize: Select text, Cmd + I Inline Code: Select text, Cmd + K Strikethrough: Select text, Cmd + U Link: Select text, Control + Shift + L Image: Select text, Control + Shift + I Select Word: Control + Option + W Select Line: Shift + Cmd + L Select All: Cmd + A Deselect All: Cmd + D Convert to Uppercase: Select text, Control + U Convert to Lowercase: Select text, Control + Shift + U Convert to Titlecase: Select text, Control + Option + U Convert to List: Select lines, Control + L Convert to Blockquote: Select lines, Control + Q Convert to H1: Cmd + 1 Convert to H2: Cmd + 2 Convert to H3: Cmd + 3 Convert to H4: Cmd + 4 Convert to H5: Cmd + 5 Convert to H6: Cmd + 6 Convert Spaces to Tabs: Control + [ Convert Tabs to Spaces: Control + ] Insert Current Date: Control + Shift + 1 Insert Current Time: Control + Shift + 2 Insert entity &lt;: Control + Shift + , Insert entity &gt;: Control + Shift + . Insert entity &amp;: Control + Shift + 7 Insert entity Space: Control + Shift + Space Insert Scriptogr.am Header: Control + Shift + G Shift Line Left: Select lines, Cmd + [ Shift Line Right: Select lines, Cmd + ] New Line: Cmd + Return Comment: Cmd + / Hard Linebreak: Control + Return Edit Auto complete current word: Esc Find: Cmd + F Close find bar: Esc Post Post on Scriptogr.am: Control + Shift + S Post on Tumblr: Control + Shift + T Export Export HTML: Option + Cmd + E Export PDF: Option + Cmd + P And more?Don’t forget to check Preferences, lots of useful options are there. Follow @Mou on Twitter for the latest news. For feedback, use the menu Help - Send Feedback]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2016%2F11%2F14%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
